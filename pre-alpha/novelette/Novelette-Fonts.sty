%%
%% This is file Novelette-Fonts.sty,
%% part of Novelette document class.
%% Copyright 2022 Robert Allgeyer.
%%
%% It may be used, distributed, and/or modified under the
%% conditions of the MIT License. See:
%% https://opensource.org/licenses/MIT
%% 
%%
\ProvidesFile{Novelette-Fonts.sty}%
[2022/06/22 v0.0.1 LuaLaTeX file (font settings and defaults)]
%%


%% INITIALIZATION
%% ----------------------------------------------------------------------------
% Novelette uses the `fontspec' package for sophisticated font choices.
% Fonts are not activated until \AtEndPreamble. Until then, the basic TeX fonts
%   are temporarily specified, so that packages can load without complaint.
% These are Latin Modern fonts, which are Open Type and will work, but are not
%   stylistically suitable for works of fiction. The only reason they are
%   used here, is because just about every TeX installation has them.
\gdef\rmdefault{lmr} % Latin Modern Roman
\gdef\sfdefault{lmss} % Latin Modern Sans
\gdef\ttdefault{lmtt} % Latin Modern Mono
% The following might become unnecessary if fontspec adds the capability to
% disable keys. For now: Color and Opacity cannot be used as font features,
%   for a black/white printed book. Alas, fontspec over-rules xcolor.
% So, this code over-rules fontspec:
\gdef\@CheckFontspecFeatures#1{%
  \@tempTFfalse%
  \IfSubStr{#1}{Color}{\@tempTFtrue}{}%
  \IfSubStr{#1}{Colour}{\@tempTFtrue}{}%
  \IfSubStr{#1}{color}{\@tempTFtrue}{}%
  \IfSubStr{#1}{colour}{\@tempTFtrue}{}%
  \IfSubStr{#1}{Opacity}{\@tempTFtrue}{}%
  \IfSubStr{#1}{opacity}{\@tempTFtrue}{}%
  \if@tempTF%
    \ClassError{Novelette}{Color and Opacity forbidden as font features}%
    {You defined a font, or added a font feature, with Color or Opacity. ^^J%
     That is disallowed in Novelette.}%
  \fi%
} % end \@CheckFontspecFeatures
% Default font features (will be changed later):
\defaultfontfeatures{} % reset
\defaultfontfeatures{SmallCapsFeatures={Renderer=Basic},Ligatures=TeX,} % all
% Main and sans fonts: kerning, ligatures, and OldStyle numbers if available:
\defaultfontfeatures[\rmfamily,\sffamily]%
  {Kerning=On,Numbers=OldStyle,Ligatures=Common}
%% end initialization


%% SETTINGS FOR PARENT FONT, DESCENDANTS, OTHERS
%% ----------------------------------------------------------------------------
% Novelette requires a `parent font' to be set. The parent font is
%   the ancestor of the main (normal) font, and several other descendants.
% The parent font features, if any, should be a minimal set that will be
%   applied to all descendants. For example, if the font has an an alternate
%   style for a particular letter, and you want to use it for all descendants,
%   then you would spedify that feature for the parent font.
% For now, these settings are merely stored. Later, \AtEndPreamble,
%   the main (normal) font inherits the settings for the parent font.
%   Other descendants inherit those settings, with their own features added.
%   Anything not set by you, will have a suitable default set automatically.
\newif \if@ParentFontSet
\gdef\parentfontfeatures{}
\gdef\parentfontname{}
\DeclareDocumentCommand \SetParentFont { O{} m O{} } {% from version 1.1.
  \@CheckFontspecFeatures{#1,#3}
  \gdef\parentfontfeatures{#1,#3}
  \gdef\parentfontname{#2}
  \global\@ParentFontSettrue
}%%
% In a work of fiction, you probably do not need a sans or mono font.
%   So, \AtEndPreamble, fonts Latin Modern Sans and Mono are set,
%   because LaTeX always has them.
% If you wish to set your own sans and mono fonts, do it using standard
%   `fontspec' syntax. There is no special method in Novelette:
%   \setsansfont[features]{font name}
%   \setmonofont[features]{font name}
%
% The headfont is used in headers:
\newif \if@HeadFontSet
\gdef\@headfontfeatures{}
\gdef\@headfontname{}
\DeclareDocumentCommand \SetHeadFont { O{} m O{} } {%
  \@CheckFontspecFeatures{#1,#3}
  \gdef\@headfontfeatures{Numbers=Lining,%
    WordSpace=\@looseheadword,#1,#3}% loose letters added in header styles
  \gdef\@headfontname{#2}
  \global\@HeadFontSettrue
}%
% The chapter font is used by the \ChapterTitle command:
\newif \if@ChapterFontSet
\gdef\@chapterfontfeatures{}
\gdef\@chapterfontname{}
\DeclareDocumentCommand \SetChapterFont { O{} m O{} } {%
  \@CheckFontspecFeatures{#1,#3}
  \gdef\@chapterfontfeatures{Numbers=Lining,#1,#3}
  \gdef\@chapterfontname{#2}
  \global\@ChapterFontSettrue
}%
% The subch font is used by the \ChapterSubtitle command:
\newif \if@SubchFontSet
\gdef\@subchfontfeatures{}
\gdef\@subchfontname{}
\DeclareDocumentCommand \SetSubchFont { O{} m O{} } {%
  \@CheckFontspecFeatures{#1,#3}
  \gdef\@subchfontfeatures{Numbers=Lining,#1,#3}
  \gdef\@subchfontname{#2}
  \global\@SubchFontSettrue
}%
% For syntax consistency:
\ExplSyntaxOn
\cs_new_eq:NN \NewFontFamily \newfontfamily
\cs_new_eq:NN \NewFontFace \newfontface
\cs_new_eq:NN \SetSansFont \setsansfont
\cs_new_eq:NN \SetMonoFont \setmonofont
\cs_new_eq:NN \AddFontFeatures \addfontfeatures
\cs_new_eq:NN \AddFontFeature \addfontfeatures
\ExplSyntaxOff
%
%% end settings for parent font and others.


%% CREATING NEW FONT FONT FEATURES
%% ----------------------------------------------------------------------------
% \CreateFontFeature{substitutions}{feature code}
% Problem: Font has one or more alternate glyphs that you would like to use,
%   but they are not listed in a feature set for the font.
% Solution: Create your own feature set, with \CreateFontFeature. The created
%   feature may then be used like a real feature, in any font definition.
% The substitutions are a comma-separated list, char=char.alt and so forth.
% For example, the following substitutions are syntactically OK:
%   emdash=emdah.alt, one=one.rev, ntilde=ntilde.03
% If a substitution is not available in a particular font, it is ignored.
% You have to look at the font in a font editor, to know what is available.
% It is possible to make silly substitutions, such as a=b, five=three without
%   throwing an error, unless your code causes a cycle.
% The most useful application of this command is to reach alternate emdash,
%   and alternate oldstyle one. Not every font has these.
% The feature code is a 4-character pseudo- Open Type code, otherwise unused.
% For example, the feature code might be myfs (my fake substitution)
%   but it cannot be a pre-defined code such as lnum or smcp. It may be
%   a style set such as ss03 if you are sure that the font in question
%   do not already have ss03 (but this is taking a chance).
% Once defined, you may use it like this (for example):
%   \SetParentFont[RawFeature=+myfs]{fontname}
%   \NewFontFamily\myfake[RawFeature=+myfs]{fontname}
%   In the document body: {\addfontfeature{myfs} text}
\DeclareDocumentCommand \CreateFontFeature { m m } {%
  \IfEndWith{#1}{,}{\StrGobbleRight{#1}{1}[\@fakezero]}{\def\@fakezero{#1}}
  \def\@fakeone{"\@fakezero"}
  \StrSubstitute{\@fakeone}{=}{"]="}[\@fakeone]
  \StrSubstitute{\@fakeone}{,}{",\space["}[\@fakeone]
  \directlua{
    fonts.handlers.otf.addfeature {
      name = "#2",
      type = "substitution",
      data = {\@fakeone},
    }
  }
} %
%% end \CreateFontFeature. Above thanks to fontspec 2016.


%% ACTIVATE FONTS \AtEndPreamble
%% ----------------------------------------------------------------------------
\gdef\@ActivateFonts{% called by `Novelette.cls' \AtEndPreamble
  \ifthenelse{\equal{\rmdefault}{lmr}}{% Font not yet set.
    \IfFontExistsTF{Swainson}{\SetParentFont{Swainson}}{% Comes with Novelette.
      \SetParentFont[SmallCapsFont={Latin Modern Roman Caps}]%
        {Latin Modern Roman} % Last choice! Only because it comes with LaTeX.
      \let\scshape\oldscshape % Or small caps won't work.
      \let\smcp\oldscshape % Or small caps won't work.
    }%
  }{% If \rmdefault is not lmr, it means the user chose the font.
    % If the choice was made via \SetParentFont, no problem. But if done by
    % incorrect method, an error is thrown:
    \if@ParentFontSet\else
      \ClassError{Novelette}{Wrong command used to set main font}%
      {You tried to define the main document font the wrong way. ^^J%
      Bad: \string\renewcommand\string\rmdefault{font}\space ^^J%
      Bad: \string\usepackage{font package}\space ^^J%
      Bad: \string\RequirePackage{font package}\space ^^J%
      Bad: \string\setmainfont[features]{font}\space ^^J%
      Those are incorrect in Novelette. ^^J%
      Use \string\SetParentFont[features]{font}\space instead.}%
    \fi
  }%
  % Now we are ready for the main (normal) font, descending from parent font:
  \setmainfont[\parentfontfeatures]{\parentfontname}
  \let\mainfont\rmfamily\relax % backwards compatibility
  % The headfont, which descends from parent font:
  \if@HeadFontSet\else % default if not user-set:
    \SetHeadFont[Letters=SmallCaps,\parentfontfeatures,Scale=0.92]%
      {\parentfontname}
  \fi
  \newfontfamily\headfont[\@headfontfeatures]{\@headfontname}
  % The chapter font, descending from parent font:
  \if@ChapterFontSet\else % if no user-set font, default:
    \SetChapterFont[\parentfontfeatures,Scale=1.6]{\parentfontname}
  \fi
  \newfontfamily\chapterfont[\@chapterfontfeatures]{\@chapterfontname}
  % The subch font, descending from parent font:
  \if@SubchFontSet\else % if no user-set font, default:
    \SetSubchFont[\parentfontfeatures,Scale=1.2]{\parentfontname}
  \fi
  \newfontfamily\subchfont[\@subchfontfeatures]{\@subchfontname}
  % The remaining fonts are not descendants of parent font:
  \ifthenelse{\equal{\ttdefault}{lmtt}}{\setmonofont{Latin Modern Mono}}{}
  \ifthenelse{\equal{\sfdefault}{lmss}}{\setsansfont{Latin Modern Sans}}{}
%
} % end \@ActivateFonts, called by `Novelette.cls' \AtEndPreamble.
%%


%%
\endinput
%%
%% End of file Novelette-Fonts.sty.


