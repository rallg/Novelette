%%
%% This is file Novelette-Images.sty,
%% part of Novelette document class.
%% Copyright 2022 Robert Allgeyer.
%%
%% It may be used, distributed, and/or modified under the
%% conditions of the MIT License. See:
%% https://opensource.org/licenses/MIT
%% 
%%
\ProvidesFile{Novelette-Images.sty}%
[2022/06/22 v0.0.1 LuaLaTeX file (image placement)]
%%

%% General LaTeX has many ways to place an image, and various strategies
%% for moving images to wherever they fit. That is fine for the kind of
%% academic papers that use LaTeX, but it is inappropriate for fiction.
%% In a work of fiction (or popular nonfiction, written like fiction)
%% the line-to-line spacing must be constant. Cannot be disturbed by images.
%% Also, there are a limited number of images, and a limited number
%% of places where an image should be located. All this requires the
%% standard LaTeX image placement code to be hacked here.
%% Finally, P.O.D. Services usually require PDF/X-1a:2001 conformance.
%% Novelette can do that, but all images must comply with certain
%% requirements. External scripts (provided with Novelette) can automatically
%% adjust images so that they comply with specifications.
%% Then, when Novelette places in image in your document, it will inspect
%% the image using Luacode, to ensure that it was pre-processed by script.
%% All this would be very limiting for works such as graphic novels or
%% other image-intensive works. But that is what Novelette does.
%% Ordinary fiction and nonfiction use images in the way that Novelette
%% can accomodate.

%% Image is a block element, occupying its own paragraph (or page).
%% If you need text beside an image, then create a larger image
%% with the text included. Cannot wrap text around an image.

%% Be sure to read the separate documentation about how to prepare images.
%% In general: (1) png or jpg only. (2) Flattened, no transparency.
%% (3) 300dpi (grayscale) or 600dpi (black/white) are industry norms
%% for interior images. CMYK 300dpi with ink limit for cover artwork.
%% (4) Image file must contain its resolution. (5) Exact size, without scaling.
%% (6) No private metadata. (7) Be sure grayscale is 1-channel, not rgb gray.


%% Luacode and related macro thanks to user Marcel Kr√ºger,
%% at tex.stackexchange.com.
\begin{luacode*}
  function check_colorspaces(allowed_colorspace, name)
  local doc = epdf.open(name);
  if doc == nil then
    tex.sprint(luatexbase.catcodetables['latex-package'],
        "\\errmessage{Could not open " .. name .. "}{}{}\\@gobbletwo")
    return;
  else
    for pageno=1,doc:getNumPages() do
      local xobjs= doc:getCatalog():getPage(pageno):getResourceDict():lookup("XObject");
      if not xobjs:isNull() then
        for i=1,xobjs:dictGetLength() do
          xobjDict = xobjs:dictGetVal(i):streamGetDict()
          if xobjDict:lookup('Subtype'):getName() == 'Image' then
            if not allowed_colorspace[xobjDict:lookup('ColorSpace'):getName()] then
              tex.sprint(luatexbase.catcodetables['latex-package'], '\\@firstoftwo')
              return
            end
          end
        end
      end
    end
  end
  tex.sprint(luatexbase.catcodetables['latex-package'], '\\@secondoftwo')
  return;
end
\end{luacode*}
%%
\newcommand\PDFHasDisallowedColorspaceTF[1]{%
  \directlua{%
    check_colorspaces({DeviceCMYK=true, DeviceGray=true},%
    "\luaescapestring{#1}")%
  }%
}
%%
\begin{luacode*}
  function utf16to8(u16str)
    local result = ""
    local i = 1
    if #u16str % 2 == 1 then
      print("ERROR")
      return
    end
    while i < #u16str do
      local high, low = u16str:byte(i, i + 1)
      i = i + 2
      local current = bit32.replace(low, high, 8, 8)
      if bit32.band(high, 0xFC) == 0xD8 then
        current = bit32.replace(0, current, 10, 10)
        if i > #u16str then
          print("ERROR")
          return
        end
        high, low = u16str:byte(i, i + 1)
        i = i + 2
        current = bit32.replace(current, bit32.replace(low, high, 8, 8), 0, 10) + 0x10000
      elseif bit32.band(high, 0xFC) == 0xDC then
        print("ERROR")
        return
      end
      result = result .. unicode.utf8.char(current)
    end
    return result
  end
  function normalize_string(str)
    if str:sub(1,2) == "\xFE\xFF" then
      return utf16to8(str:sub(3,-3))
    else
      return str
    end
  end
  function check_pdf_info(name, field, expected)
    local doc = epdf.open(name);
    if doc == nil then
      tex.sprint(luatexbase.catcodetables['latex-package'],
          "\\errmessage{Could not open " .. name .. "}{}{}\\@gobbletwo")
    else
      local producer = doc:getDocInfo():dictLookup(field)
      if not producer:isNull() and normalize_string(producer:getString()) == expected then
        tex.sprint(luatexbase.catcodetables['latex-package'], '\\@firstoftwo')
      else
        tex.sprint(luatexbase.catcodetables['latex-package'], '\\@secondoftwo')
      end
    end
  end
\end{luacode*}
\newcommand\PDFVerifyInfoFieldTF[3]{*
  \directlua{%
    check_pdf_info("\luaescapestring{#1}", %
    "\luaescapestring{#2}", "\luaescapestring{#3}")
  }%
}
%%

\newcommand\coverimage[1]{\gdef\my@coverimage{#1}}

\gdef\@CoverOrNot{% Called \AtBeginDocument.
  \if@cover%
    \PDFVerifyInfoFieldTF{\my@coverimage}{NSprocessed}{true}%
    {\thispagestyle{empty}\includepdf{my@coverimage}}%
%%%%%
    {\ClassError{Novelette}{Cover image must be pre-processed by scripts}%
     {Each image processed by Novelette-scripts is marked internally. ^^J%
     Your cover artwork pdf is unmarked. Use `makecmykpdf' script.}%
    }%
    \end{document} % No text allowed!
  \else%
    \renewcommand\includepdf[2][]{% From package `pdfpages'.
      \ClassError{Novelette}{Cannot use \string\includepdf\space command}%
      {Use Novelette-scripts `makegray' and `makebw' to convert pdf ^^J%
       to a raster jpg or png, suitable for placement as an image.}%
    }%
  \fi%
}
%%

%% Pertains to images:
\newlength\imagewidth
\newlength\imageheight
\newlength\imagehoffset
\newlength\imagevoffset
\newlength\@imagewidth
\newlength\@imageheight
\newlength\@imagehoffset
\newlength\@imagevoffset
\newlength\@mytotalht
%%
\setkeys{Gin}{draft=false} % Always shows the image, not a box outline.
\LetLtxMacro\my@inclgr\includegraphics\relax
%%%\if@cover\else % Need to allow it, for possible use by \includepdf in cover.
%%%  \renewcommand\includegraphics[2][]{%
%%%    \ClassError{Novelette}{Use of \string\includegraphics\space forbidden}%
%%%     {Only place images using commands specific to Novelette class.}%
%%%  }
%%%\fi
%
\newcommand\@TestImageExtension[1]{%
  \@tempTFfalse%
  \IfEndWith{#1}{.png}{\@tempTFtrue}{}%
  \IfEndWith{#1}{.PNG}{\@tempTFtrue}{}%
  \IfEndWith{#1}{.jpg}{\@tempTFtrue}{}%
  \IfEndWith{#1}{.JPG}{\@tempTFtrue}{}%
  \IfEndWith{#1}{.jpeg}{\@tempTFtrue}{}%
  \IfEndWith{#1}{.JPEG}{\@tempTFtrue}{}%
  \if@tempTF\else%
    \ClassError{Novelette}{Image format `#1' not allowed, page \thepage}%
    {Image `#1' has file type not allowed in Novelette. ^^J%
     Must have file extension png, jpg, jpeg (or capitalized). ^^J%
     Others such as pdf, bmp, tiff, eps, svg, jp2, jbig, are not allowed. ^^J%
     The file extension is mandatory. Provide it, if missing.}%
  \fi%
} %
%%


%% BLOCK IMAGE
%% ----------------------------------------------------------------------------
% \image{yourimagename.png} % or jpg
% Cannot be used in header.
% Image is placed as a block element, in its own paragraph (or own page).
% Image is placed where code is written, if it fits there.
% If it does not fit there, it is moved to top of following page.
% Required argument: Image filename with extension. Possibly with path.
% The image is horizontally centered in the printable area.
% If you need to tweak it left/right, put something such as non-breaking
% spaces or \hbox elements before or after.
% This is a substitute for LaTeX floats. Does not require `float' package.

% Many of these are built-in LaTeX commands, with the usual mystery syntax:
\providecommand*\floatlocation[2]{\@namedef{fps@figure}{!ht}}
\floatlocation{figure}{!ht} % Here, or top of next page.
\gdef\ftype@figure{1} % Mystery TeX code.
\DeclareDocumentCommand \image { m } {%
  \iftoggle{@inheader}{%
    \ClassError{Novelette}{Cannot use \string\image\space in header}%
      {Image is a block element. Not allowed in header.}%
  }{}%
  \@TestImageExtension{#1}%
  \@tempTFfalse%
  \IfSubStr*{\@UnknownImages}{#1}{\@tempTFtrue}{}%
  \if@tempTF\else\@NovelInspectImage{#1}\fi%
  \@float{figure}%
  \@FloatImage{#1}% Defined below.
  \end@float\par%
  \null%
  \vspace{0.01pt plus 0pt minus 0.02pt} % caulk
}
%%

%% Environment @floatimagegap. Only used by \@FloatImage command.
% Creates a gap at fixed height, regardless of content.
% Needs to compensate for prior line depth.
\newcounter{@gaplines} % passes the argument down to environment end
\DeclareDocumentEnvironment {@floatimagegap} { m } {%
  \par%
  \null%
  \vspace*{-\nbs}%
  \begin{textblock*}{\textwidth}[0,0](0pt,0pt)%
  \setcounter{@gaplines}{#1}%
  \strut\par%
  \vspace*{-\nbs}%
}{% close the environment:
  \end{textblock*}%
  \par%
  \vspace*{#1\nbs}%
} %
%%
\DeclareDocumentCommand \@FloatImage { m }{% DO NOT CALL DIRECTLY
  \global\@UsingNovelCommandtrue%
  \gdef\@mygraphic{\myinclgr[scale=\@TMratio]{#1}}%
  \gdef\@mygraphicname{#1}%
  \gsetlength\@imagewidth{\widthof{\@mygraphic}}%
  \gsetlength\@imageheight{\heightof{\@mygraphic}}%
  \setlength\@mytotalht{\@imageheight+0.3\nbs}%
  \FPdiv{\@mytotalhtN}{\strip@pt\@mytotalht}{\strip@pt\nbs}%
  \FPadd{\@mytotalhtN}{\@mytotalhtN}{0.5}% round upward
  \FPround{\@mytotalhtN}{\@mytotalhtN}{0}% to integer
  \FPmin{\@allowmyoverflow}{\@mytotalhtN}{\my@lpp}% not exceeding lpp
  % If a full-page image is too tall for a page, standard TeX float will
  % delay it until the time that floats are cleared, typically by \clearpage.
  % That would probably be at the end of a section.
  % In Novelette this behavior is hacked. Regardless of the image's actual
  % height, it is treated as if its height does not exceed whatever will
  % fit on a single page. Then, a full-page float will appear at the first
  % opportunity, rather than being delayed. As a consequence, an oversized
  % full-page float may overflow into the bottom clearance.
  % To fix that, you need to edit the image in graphics.
  \begin{@floatimagegap}{\@allowmyoverflow}%
    \vspace*{-\nfs}%
    \null%
    {\centering%
      \makebox[0pt][l]{%
        \hspace{\dimexpr\@imagehoffset-0.5\@imagewidth}%
        \stake\smash{\raisebox{\@imagevoffset}{\@mygraphic}}%
      }%
      \par%
    }%
  \end{@floatimagegap}%
  \global\@UsingNovelCommandfalse%
} % 
% end Float Image
%%


%% Read file bytes as plain text, for later parsing.
% Output is comma-separated list of byte codes, decimal 0-255.
% Returns -1 if requested start is more than file size.
% Returns all bytes if requested number exceeds file size.
% Does not test if file exists; error if not found.
\DeclareDocumentCommand\Novelettegetbytes { m m m } {%
  % filename, start byte number (0=beginning, e=up to end), number of bytes
  \ifthenelse{\equal{#2}{e}}{% package xifthen
    \long\edef\Novelettebytesare{%
      \directlua{
        inp = assert(io.open("#1", "rb"))
        local e=inp:seek("end")
        if #3>e+1 then
          inp:seek("set")
          local r=inp:read(e)
          sep=""
          for i,_ in string.bytes(r)
          do
          tex.sprint(sep)
          sep=","
          tex.sprint(i)
          end
        else
          local b=e-2-math.min(e,#3)
          local w=1+math.min(e,#3)
          inp:seek("set",b)
          local r=inp:read(w)
          sep=""
          for i,_ in string.bytes(r)
          do
          tex.sprint(sep)
          sep=","
          tex.sprint(i)
          end
        end
      }%
    }%
  }{%
    \long\edef\Novelettebytesare{%
      \directlua{
        inp = assert(io.open("#1", "rb"))
        local e=inp:seek("end")
        if #2>e then tex.sprint(-1) else
          local w=math.min(#3,e-#2)
          inp:seek("set",#2)
          local r=inp:read(w)
          sep=""
          for i,_ in string.bytes(r)
          do
          tex.sprint(sep)
          sep=","
          tex.sprint(i)
          end
        end
      }%
    }%
  }%
} % end @Novelettegetbytes

%%
% png bit depth is 8 for ordinary color or gray, 1 for b/w monochrome.
% Although png allows more than 8, Novelette does not.
\def\Novelettepngbitdepth#1{\Novelettegetbytes{#1}{24}{1}\Novelettebytesare}
% png color type: 0=grayscale (incl. b/w).
% Novelette only permits colortype 0 for non-color book interiors.
% other: 2=rgb, 3=indexed rgb, 4=gray alpha, 6=rgb alpha.
\def\Novelettepngcolortype#1{\Novelettegetbytes{#1}{25}{1}\Novelettebytesare}
%%

%%
% Examine png or jpg image for Novelette-make as comment:
\gdef\@UnknownImages{}
%
% This is the (decimal) code string:
\gdef\@Novelettemake{110,111,118,101,108,109,97,107,101}
%
\newcommand\@NovelInspectImage[1]{%
  \StrRight{#1}{3}[\tempEXT]%
  \ifthenelse{\equal{\tempEXT}{png} \OR \equal{\tempEXT}{PNG}}{%
    \Novelettegetbytes{#1}{e}{256}%
  }{% jpg or JPG:
    \Novelettegetbytes{#1}{0}{256}%
  }%
  \IfSubStr{\Novelettebytesare}{\@Novelettemake}{}{%
    \xdef\@UnknownImages{\@UnknownImages\space #1}%
  }%
}
%%

%% Called \AfterEndDocument:
\long\gdef\@WarnUnknownImages{%
  \@tempTFfalse%
  \ifthenelse{\equal{\@UnknownImages}{}}{}{\@tempTFtrue}%
  \if@tempTF%
      \typeout{^^JNovelette Alert: Some images not processed by scripts.^^J%
       \space List of unprocessed images: \@UnknownImages ^^J%
       \space Above list does not include any `known good' set by you. ^^J^^J}%
      \ClassWarning{Novelette}{\@testintentional %
      Some images may not meet PDF/X specifications. ^^J%
      See near end of log file, `Some images not processed by scripts'. ^^J}%
  \fi%
}
%%


%%
\endinput
%%
%% End of file Novelette-Images.sty.


