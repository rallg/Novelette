%%
%% This is file Novelette-TextMacros.sty,
%% part of Novelette document class.
%% Copyright 2022 Robert Allgeyer.
%%
%% It may be used, distributed, and/or modified under the
%% conditions of the MIT License. See:
%% https://opensource.org/licenses/MIT
%% 
%%
\ProvidesFile{Novelette-TextMacros.sty}%
[2022/06/22 v0.0.1 LuaLaTeX file (text macros usable within document body)]
%%


%%
\gdef\straightquote{{\addfontfeature{Ligatures=ResetAll}'}}
\gdef\straightdblquote{{\addfontfeature{Ligatures=ResetAll}"}}
%%


%%

%% \memo{} does not print or save its argument.
% Useful when you wish to put a note to yourself in the *.tex document.
% Not the same as % comment, because anything after the braces will print.
\long\gdef\memo#1{}
%%

%% \stake is like \strut, but does not occupy much vertical space.
\gdef\stake{\rule{0pt}{1pt}} % placeholder
%%

%% \smcp{} and \textsc{} small caps (Open Type) and \allsmcp{}:
\DeclareDocumentCommand \smcp { +m } {% lowercase to small caps
  {\addfontfeature{Letters=SmallCaps}#1}%
}
\ExplSyntaxOn
\DeclareDocumentCommand \allsmcp { +m } {% lowercase+uppercase to small caps
  \fontspec_if_feature:nTF {c2sc}{%
   {\addfontfeatures{Letters=UppercaseSmallCaps, Letters=SmallCaps}#1}%
  }{%
   {\addfontfeature{Letters=SmallCaps}\MakeLowercase{#1}}%
  }%
 }
\ExplSyntaxOff
\let\textsc\smcp\relax % unified
\let\oldscshape\scshape\relax % in case needed later
\let\scshape\smcp\relax % unified
\providecommand\FirstLineFont{\smcp} % package `magaz'
\renewcommand\FirstLineFont{\smcp}
%%

%% Novelette normally allows only black or grayscale text on white paper.
%% Just in case `xcolor' re-defines its internals, to prevent code bomb:
\ProvideDocumentCommand\@declaredcolor { m } {}
\ProvideDocumentCommand\@undeclaredcolor { o m } {}
% For convenience:
\definecolor[named]{gray1}{gray}{0.15} % ten percent gray, etc.
\definecolor[named]{gray2}{gray}{0.25}
\definecolor[named]{gray3}{gray}{0.33}
\definecolor[named]{gray4}{gray}{0.4}
\definecolor[named]{gray5}{gray}{0.5}
\definecolor[named]{gray6}{gray}{0.6}
\definecolor[named]{gray7}{gray}{0.68}
\definecolor[named]{gray8}{gray}{0.75}
\definecolor[named]{gray9}{gray}{0.87}
%%


%% \bigemdash inspired by code by RTBarnard at stackoverflow.com:
% Allows a rule of variable length to fill available space at its right.
% There must be a "right-hand limit" imposed by something, such as by enclosing
%   the rule in a \makebox of known width, or by an immediate \par.
%   Without this limit, rule will be missing (zero width) or excessively long,
%   or an error will result (referring to \leaders).
% Takes a single optional argument: Comma-separated raise, line thickness.
%   If no argument or empty, defaults to [1,1].
%   Without comma, argument defaults to [argument,1].
%   First number: Scales raise/down. 1 = raise of emdash in typical fonts.
%   Second number: Scales line thickness. 1 = emdash in typical fonts.
% NOTE: Built-in TeX PDF viewer might show the line at slightly incorrect
%   width and height. Best seen in a "real" PDF viewer.
\DeclareDocumentCommand \bigemdash { O{1,1} }
 {%
  \ifthenelse{\equal{#1}{}\OR\equal{#1}{\space}}{%
    \def\@myargsi{1,1}}{\def\@myargsi{#1}%
  }%
  \StrDel{\@myargsi}{\space}[\@myargs]%
  \StrCut{\@myargs}{,}{\@myraisei}{\@mythicki}%
  \ifthenelse{\equal{\@myraisei}{}\OR\equal{\@myraisei}{\space}}{%
    \def\@myraise{1}}{\def\@myraise{\@myraisei}%
  }%
  \ifthenelse{\equal{\@mythicki}{}\OR\equal{\@mythicki}{\space}}{%
    \def\@mythick{1}}{\def\@mythick{\@mythicki}%
  }%
  \FPmul{\@myraise}{\@myraise}{0.56}% ex, typical font emdash raise
  \FPmul{\@mythick}{\@mythick}{0.049}% em, typical font emdash thickness
  {\leaders\hbox{\rule[\@myraise ex]{1pt}{\@mythick em}}\hfill\stake}%
 }
%%

%% \charscale[scale,x,y]{text} and starred version
% This is an "in-line" means of adjusting font size
%   and position, without changing the baselineskip.
% If the optional argument is unused or empty, then the text is not scaled
%   or moved, but equivalent to \stake\smash{text}.
% Up to 3 arguments may be used in the single optional argument.
% They are separated by commas. Spaces ignored.
% First argument is scale. Number>=0.5. Default 1. Relative to what the size
%   would otherwise be. May multiply with an already-scaled font.
% Second and third arguments are x-offset and y-offset, respectively.
% Offsets are lengths, best measured in em or \nfs for horizontal,
%   and em or \nfs or \nbs for vertical. Default 0pt. Can abbreviate as 0.
% Posiive offsets are horizontal right, vertical up.
% Text is "smashed" and may go anywhere, even overlying other text or image.
% The unstarred command occupies width equal to the scaled text,
%   thus leaving a "hole" where the text would have been.
% The starred command occupies zero width, thus no hole. Consecutive starred
%   commands, without intervening space, displace from same origin.
% The text must be on a single line, without break or wrap.
% Do not use \\ or \par inside \charscale. Sometimes you need \par after it.
% If the text is in a font other than usual, place the font command
%   outside \charscale, not inside.
\DeclareDocumentCommand \charscale { s O{1} m } {%
  % Allows empty or blank to be used, and still provide default values:
  \ifthenelse{\equal{#2}{}\OR\equal{#2}{\space}}{%
    \def\@myargs{1}%
  }{%
    \def\@myargs{#2}%
  }%
  \StrDel{\@myargs}{\space}[\@myargsns]% needs {\space} not { }
  \StrCut{\@myargsns}{,}{\@myscalet}{\@mycoord}%
  \ifthenelse{\equal{\@myscalet}{}}{%
    \def\@myscale{1}%
  }{%
    \def\@myscale{\@myscalet}%
  }%
  \FPmax{\@myscale}{\@myscale}{0.5}% not permitted below this scale
  \StrCut{\@mycoord}{,}{\@myxt}{\@myyt}%
  \ifthenelse{\equal{\@myxt}{}\OR\equal{\@myxt}{0}}{%
    \def\@myx{0pt}%
  }{%
    \def\@myx{\@myxt}%
  }%
  \ifthenelse{\equal{\@myyt}{}\OR\equal{\@myyt}{0}}{%
    \def\@myy{0pt}%
  }{%
    \def\@myy{\@myyt}%
  }%
  \IfBooleanTF{#1}%
  {% starred
    \ifvmode\else\unskip\fi%
    \stake\makebox[0pt][l]{%
      \smash{\hspace{\@myx}\raisebox{\@myy}{\scalebox{\@myscale}{#3}}}%
    }%
  }{% unstarred
    \stake\makebox[0pt][l]{%
      \smash{\hspace{\@myx}\raisebox{\@myy}{\scalebox{\@myscale}{#3}}}%
    }%
    \smash{\phantom{\scalebox{\@myscale}{#3}}}%
  }%
 }% end \charscale
%%


% Note that \savepos is a luatex primitive, not a macro from gridset package.
% Length \TotalYpos is measured from the very bottom of the page,
% upward to the baseline of non-existent "line zero" in main text.
% The first printed main text line is line 1. Not influenced by header.
\newlength\TotalYpos
\gdef\@GetInitialYpos{% called by `Novelette.cls' \AtEndPreamble
  \begingroup%
    \savepos%
    \protected@write\@auxout{}{%
      \protect\@TotalYpos{\noexpand\number\lastypos}%
    }%
  \endgroup%
}
%
\gdef\@TotalYpos#1{\gsetlength\TotalYpos{#1sp}}
%


%% Environment toc (alternative table of contents):
% optional argument: additional vspace (\nbs) after each \tocitem entry.
% required: LR margin increase, to narrow the table (0pt = full textwidth).
\newlength\@tocnumwid
\newlength\@tocskip
\newenvironment{toc}[2][0]{%
  \begin{adjustwidth}{#2}{#2}%
  \begingroup%
  \setlength\parindent{0pt}% local
  \setlength\@tocnumwid{\widthof{00.~}}% local
  \setlength\@tocskip{#1\nbs}% local
}{%
  \endgroup%
  \end{adjustwidth}\par%
}%
% \tocitem[number]{description}{page} provides a one-line table entry in toc.
% optional number might be chapter number. Can use ~ to offset.
% unstarred: distance between description and page is not decorated.
% starred (better): distance between description and page has dotted line.
\newcommand\tocitem{\@ifstar\@tocitemst\@tocitemns}
\newcommand\@tocitemst[3][]{%
  \ifthenelse{\equal{#1}{}}{}{%
    \ifthenelse{\equal{#1}{~}}{%
      \makebox[\@tocnumwid][l]{~}%
    }{%
      \makebox[\@tocnumwid][l]{#1.}%
    }%
  }%
  #2\,%
  \leaders\hbox to 0.3em{\hfil.\hfil}\hfill% Thanks to user daniel-j via GitHub.
  \,#3\par\vspace{\@tocskip}%
}%
%
\newcommand\@tocitemns[3][]{%
  \ifthenelse{\equal{#1}{}}{}{%
    \ifthenelse{\equal{#1}{~}}{%
      \makebox[\@tocnumwid][l]{~}%
    }{%
      \makebox[\@tocnumwid][l]{#1.}%
    }%
  }%
  #2%
  \hfill%
  #3\par\vspace{\@tocskip}%
}%
%% end toc and \tocitem.


%% \lnum for lining numbers.
\gdef\lnum#1{{\addfontfeature{Numbers=Lining}#1}}
%%



%% Some things must wait until after layout calculations:
\gdef\@ActivateTextLengths{% called by `Novelette.cls' \AtEndPreamble
  % Store some normal values (main font) for global use in document body:
  \newlength\nfs % abbreviation for normal font point size
    \gsetlength\nfs{\@NumFontSize}
  \newlength\nbs % abbreviation for normal baselineskip
    \gsetlength\nbs{\baselineskip}
  \gsetlength\parindent{1.5em} % may be locally changed
  \newlength\normalparindent
    \gsetlength\normalparindent{\parindent}
  \newlength\normalxheight % height of lowercase x
    \gsetlength\normalxheight{\heightof{x}}
  \newlength\normalXheight % height of uppercase X
    \gsetlength\normalXheight{\heightof{X}}
  \newlength\normalscxheight % height of small cap x
    \gsetlength\normalscxheight{\heightof{\textsc{x}}}
  \newlength\normalAringheight % height of Å (usually tallest in Latin-1)
    \gsetlength\normalAringheight{\heightof{Å}}
  \newlength\normaldescender % depth of lowercase gjpqy
    \gsetlength\normaldescender{\depthof{gjpqy}}
}% end \@ActivateTextLengths
%%


%% More things that must wait:
\gdef\@ActivateTextMacros{% called by `Novelette.cls' \AtBeginDocument
  % \forceindent and \backindent perform or remove indent, using \hspace{}.
  % Rationale: Sometimes \indent and \noindent neutralized by another command.
  \gdef\forceindent{\ifvmode\else\unskip\fi\stake\hspace{\normalparindent}}
  \gdef\backindent{\ifvmode\else\unskip\fi\hspace{-\normalparindent}}
}% end \@ActivateTextMacros
%%


%%
\endinput
%%
%% End of file Novelette-TextMacros.sty.


